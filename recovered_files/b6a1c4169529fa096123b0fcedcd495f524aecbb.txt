const bcrypt = require("bcryptjs");
const { User } = require("../models");

const authController = {
  // Renderizar página de login
  showLogin: (req, res) => {
    res.render("auth/login", { errors: req.flash("error") });
  },

  // Renderizar página de registro
  showRegister: (req, res) => {
    res.render("auth/register", { errors: req.flash("error") });
  },

  // Processar registro
  register: async (req, res) => {
    try {
      const { name, email, password, role } = req.body;

      // Verificar se o usuário já existe
      const userExists = await User.findOne({ where: { email } });
      if (userExists) {
        req.flash("error", "Email já cadastrado");
        return res.redirect("/auth/register");
      }

      // Criptografar senha
      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash(password, salt);

      // Criar usuário
      await User.create({
        name,
        email,
        password: hashedPassword,
        role,
      });

      req.flash("success", "Registro realizado com sucesso");
      res.redirect("/auth/login");
    } catch (error) {
      console.error(error);
      req.flash("error", "Erro ao registrar usuário");
      res.redirect("/auth/register");
    }
  },

  // Processar login
  login: (req, res) => {
    res.redirect("/dashboard");
  },

  // Logout
  logout: (req, res) => {
    req.logout(() => {
      res.redirect("/");
    });
  },
};

module.exports = authController;
